#!/bin/bash
# This script uses ffmpeg to stream a video source using RTP and PSreamer [1]
# We assume ffmpeg has been compiled as described in script ffmpeg_install.sh
# It creates a local sdp file which is distributed through a python HTTP server
# It also creates a csv file describing the streaming properties
# [1] https://ans.disi.unitn.it/redmine/projects/peerstreamer-ng
#
# The test is executed on lo interface

################################################################################
### SCRIPT CONFIGURATION START
################################################################################

if [ "$#" -ne 4 ]; then
  PEERPORTBASE=30000
  RTPPORTBASE=5001
else
  PEERPORTBASE=$1
  RTPPORTBASE=$2
fi

# ffmpeg executable
FFMPEGBIN=${HOME}/ffmpeg-src/install/bin/ffmpeg

# PeerStreamer executable full path
PSTREAMERBIN=${HOME}/peerstreamer-src/Libs/pstreamer/pstreamer

# Video file name (fullpath name)
VNAME=${HOME}/peerstreamer-src/test_scripts/sintel_30fps_cfr_2000kbps_720p_kint3_main3_1_2pe_tfp_fd.m4v

# Video channel name
VCNAME="Sintel"

# SDP file name generated by ffmpeg and used by PeerStreamer-NG (this file will
# be generated in /tmp directory)
SDPFILE="sintel.sdp"

# Channels file name (this file will be generated in /tmp directory)
CHFILE="channels.csv"

# Port of source peerstreamer node
SOURCEPEERPORT=$((${PEERPORTBASE}))

# IP address of the peerstreamer source node
HOSTEXTIP=127.0.0.1

# Destination RTP base port (ports from $RTPBASEPORT to $RTPBASEPORT + 3 will be
# used)
RTPBASEPORT=$((${RTPPORTBASE}))

# Port of the HTTP server serving the SDP files
SDPHTTPPORT=8000

################################################################################
### SCRIPT CONFIGURATION STOP
################################################################################


# Video file name
V=${VNAME}
echo "Streamed file: ${V}"

# Create the csv file describing the existing channels (only one channel in this
# example)
echo "Creating CSV channels file"
echo "$VCNAME,$HOSTEXTIP,$SOURCEPEERPORT,QUALITY,http://$HOSTEXTIP:${SDPHTTPPORT}/${SDPFILE}" > /tmp/${CHFILE}
cat /tmp/${CHFILE}

# Start HTTP server serving SDP files
echo "Starting SimpleHTTPServer on port ${SDPHTTPPORT}"
cd /tmp
python -m SimpleHTTPServer ${SDPHTTPPORT} > /dev/null 2>&1 &
HTTP_PID=$!
cd -

echo "Starting ffmpeg"
${FFMPEGBIN} -re -i $V -vcodec copy -an -f rtp rtp://127.0.0.1:$((${RTPBASEPORT}+2)) -acodec copy -vn -f rtp rtp://127.0.0.1:${RTPBASEPORT} -sdp_file /tmp/${SDPFILE} > /dev/null 2>&1 &
FFMPEG_PID=$!

sed '1d' /tmp/${SDPFILE} > /tmp/tmp.sdp
mv /tmp/tmp.sdp /tmp/${SDPFILE}

echo "Starting source streamer"
${PSTREAMERBIN} -p 0 -c "port=$SOURCEPEERPORT,chunkiser=rtp,base=$RTPBASEPORT,addr=127.0.0.1,max_delay_ms=5,chunk_size=1000,peer_timeout=6,iface=lo"
SOURCE_PEER_PID=$!

trap "kill $HTTP_PID $SOURCE_PEER_PID $FFMPEG_PID" SIGINT SIGTERM EXIT
